input {
    beats {
        port => 5003
    }
    beats {
        port => 5004
    }
}

filter {
    if [type] == "metricsets" {
        mutate {
            replace => { "host" => "%{[beat][name]}" }
            remove_field => [ "[beat][hostname]", "[beat][name]", "[beat][version]" ]
        }
        if [metricset.module] == "docker" {
            mutate {
                add_field => { "container_id" => "%{[docker][container][id]}" }
            }
            grok {
                match => [ "container_id", "(?<container_id_short>.{7})" ]
            }
        }
    }
    if [type] == "docker-logs" {
        mutate {
            add_field => { "message" => "%{log}" }
            replace => { "host" => "%{[beat][name]}" }
            remove_field => [ "[beat][hostname]", "[beat][name]", "[beat][version]", "time", "stream", "input_type", "log", "offset" ]
        }
        grok {
            match => [ "source", "%{GREEDYDATA}/%{WORD:container_id}-json.log" ]
        }
        grok {
            match => [ "container_id", "(?<container_id_short>.{7})" ]
        }
        mutate {
            remove_field => [ "source", "timestamp" ]
        }

        grok {
            match => [ "message", "(?m)%{TIMESTAMP_ISO8601:timestamp} - %{WORD:format} - %{GREEDYDATA}" ]
        }
        if [format] == "PYTHON_CORE_2" {
            grok {
                match => [ "message", "(?m)%{TIMESTAMP_ISO8601:timestamp} - %{WORD:format} - %{NOTSPACE:server} - %{WORD:environment} - %{WORD:level} - %{USER:producer} - %{DATA:location} - %{GREEDYDATA:message}" ]
                overwrite => [ "message", "format", "timestamp" ]
            }
        } else if [format] == "PYTHON_CORE_3" {
            grok {
                match => [ "message", "(?m)%{TIMESTAMP_ISO8601:timestamp} - %{WORD:format} - %{NOTSPACE:server} - %{NUMBER:version} - %{WORD:environment} - %{WORD:level} - %{USER:producer} - %{DATA:location} - %{GREEDYDATA:message}" ]
                overwrite => [ "message", "format", "timestamp" ]
            }
        } else if [format] == "CARBON_STATS" {
            grok {
                match => [ "message", "(?m)%{TIMESTAMP_ISO8601:timestamp} - %{WORD:format} - %{NOTSPACE:server} - %{NUMBER:version} - %{WORD:environment} - %{WORD:level} - %{USER:producer} - %{DATA:location} - %{DATA:[stat][name]}:%{DATA:[stat][key]}:%{NUMBER:[stat][value]:float}" ]
                overwrite => [ "format", "timestamp" ]
            }
            mutate {
                remove_field => [ "message" ]
            }
        } else [format] == "CARBON_API" {
            grok {
                match => [ "message", "(?m)%{TIMESTAMP_ISO8601:timestamp} - %{WORD:format} - %{NOTSPACE:server} - %{NUMBER:version} - %{WORD:environment} - %{WORD:level} - %{USER:producer} - %{DATA:location} - %{WORD:[api][action]}:(%{URIPATH:[api][base]}(%{URIPARAM:[api][query]})?):(%{NUMBER:[api][response]:integer})?:(%{NUMBER:[api][time]:float})?" ]
                overwrite => [ "format", "timestamp" ]
            }
            mutate {
                uppercase => [ "[api][action]" ]
                remove_field => [ "message" ]
            }
        } 

        grok {
            match => [ "location", "%{DATA:file}:%{DATA:function}:%{NUMBER:line}" ]
        }
        date {
            match => [ "timestamp", "YYYY-MM-dd HH:mm:ss,SSS" ]
        }
        mutate {
            remove_field => [ "timestamp", "timestamp8601", "severity", "severity_label", "priority" ]
            lowercase => [ "producer", "server" ]
        }

    }
}

output {
    elasticsearch {
        hosts => "elasticsearch.elk.worker.arkera.co:9200"
    }
}
